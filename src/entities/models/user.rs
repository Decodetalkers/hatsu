//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.2

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "user")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub name: String,
    pub preferred_username: String,
    pub inbox: String,
    pub outbox: String,
    pub local: bool,
    pub public_key: String,
    pub private_key: Option<String>,
    pub last_refreshed_at: String,
    pub feed: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::post::Entity")]
    Post,
    #[sea_orm(has_many = "super::user_feed::Entity")]
    UserFeed,
    #[sea_orm(has_many = "super::user_feed::Entity")]
    UserFeedItem,
    #[sea_orm(has_many = "super::user_follower::Entity")]
    UserFollower,
}

impl ActiveModelBehavior for ActiveModel {}

impl Related<super::post::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Post.def()
    }
}

impl Related<super::user_feed::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserFeed.def()
    }
}

impl Related<super::user_feed_item::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserFeedItem.def()
    }
}

impl Related<super::user_follower::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserFollower.def()
    }
}
